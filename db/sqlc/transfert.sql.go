// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: transfert.sql

package db

import (
	"context"
)

const createTransfert = `-- name: CreateTransfert :one
INSERT INTO transfert (
  from_account_id, to_account_id, amount
) VALUES (
  $1, $2, $3
)
RETURNING id, from_account_id, to_account_id, amount, created_at
`

type CreateTransfertParams struct {
	FromAccountID int64 `json:"from_account_id"`
	ToAccountID   int64 `json:"to_account_id"`
	Amount        int64 `json:"amount"`
}

func (q *Queries) CreateTransfert(ctx context.Context, arg CreateTransfertParams) (Transfert, error) {
	row := q.db.QueryRowContext(ctx, createTransfert, arg.FromAccountID, arg.ToAccountID, arg.Amount)
	var i Transfert
	err := row.Scan(
		&i.ID,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const deleteTransfert = `-- name: DeleteTransfert :exec
DELETE FROM transfert
WHERE id = $1
`

func (q *Queries) DeleteTransfert(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTransfert, id)
	return err
}

const getTransfert = `-- name: GetTransfert :one
SELECT id, from_account_id, to_account_id, amount, created_at FROM transfert
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTransfert(ctx context.Context, id int64) (Transfert, error) {
	row := q.db.QueryRowContext(ctx, getTransfert, id)
	var i Transfert
	err := row.Scan(
		&i.ID,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const listTransferts = `-- name: ListTransferts :many
SELECT id, from_account_id, to_account_id, amount, created_at FROM transfert
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListTransfertsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListTransferts(ctx context.Context, arg ListTransfertsParams) ([]Transfert, error) {
	rows, err := q.db.QueryContext(ctx, listTransferts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transfert{}
	for rows.Next() {
		var i Transfert
		if err := rows.Scan(
			&i.ID,
			&i.FromAccountID,
			&i.ToAccountID,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTransfert = `-- name: UpdateTransfert :one
UPDATE transfert
  set amount = $2
WHERE id = $1
RETURNING id, from_account_id, to_account_id, amount, created_at
`

type UpdateTransfertParams struct {
	ID     int64 `json:"id"`
	Amount int64 `json:"amount"`
}

func (q *Queries) UpdateTransfert(ctx context.Context, arg UpdateTransfertParams) (Transfert, error) {
	row := q.db.QueryRowContext(ctx, updateTransfert, arg.ID, arg.Amount)
	var i Transfert
	err := row.Scan(
		&i.ID,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}
